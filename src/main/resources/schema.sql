DROP TABLE IF EXISTS films, mpa, genres, film_genres, users, likes, friends;

CREATE TABLE IF NOT EXISTS mpa
(
    mpa_id   integer GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,
    mpa_name varchar(255)                             NOT NULL
);

CREATE TABLE IF NOT EXISTS films
(
    film_id      integer GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,
    name         varchar(255)                             NOT NULL,
    description  varchar(200),
    release_date date                                     NOT NULL,
    duration     integer,
    mpa_id       integer REFERENCES mpa (mpa_id)
);

CREATE TABLE IF NOT EXISTS genres
(
    genre_id   integer GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,
    genre_name varchar(255)                             NOT NULL
);

CREATE TABLE film_genres
(
    film_id  integer REFERENCES films (film_id)   NOT NULL,
    genre_id integer REFERENCES genres (genre_id) NOT NULL,
    PRIMARY KEY (film_id, genre_id)
);

CREATE TABLE IF NOT EXISTS users
(
    user_id  integer GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,
    name     varchar(255),
    login    varchar(255)                             NOT NULL,
    email    varchar(255)                             NOT NULL,
    birthday date,
    CONSTRAINT uc_Users_email UNIQUE (email),
    CONSTRAINT uc_Users_login UNIQUE (login)
);

CREATE TABLE IF NOT EXISTS likes
(
    film_id integer REFERENCES films (film_id) NOT NULL,
    user_id integer REFERENCES users (user_id) NOT NULL,
    CONSTRAINT "likes_pk"
        PRIMARY KEY (user_id, film_id)
);

CREATE TABLE IF NOT EXISTS friends
(
    user_id        integer REFERENCES users (user_id) NOT NULL,
    friend_user_id integer REFERENCES users (user_id) NOT NULL,
    CONSTRAINT "friends_pk"
        PRIMARY KEY (user_id, friend_user_id)
);